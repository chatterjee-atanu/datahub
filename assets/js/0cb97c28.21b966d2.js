"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[99971],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,m=u["".concat(l,".").concat(d)]||u[d]||g[d]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},97886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});n(96540);var a=n(15680);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Saving MCPs to a File",slug:"/advanced/writing-mcps",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/advanced/writing-mcps.md"},l="Saving MCPs to a File",c={unversionedId:"docs/advanced/writing-mcps",id:"version-1.0.0/docs/advanced/writing-mcps",title:"Saving MCPs to a File",description:"What is an MCP?",source:"@site/versioned_docs/version-1.0.0/docs/advanced/writing-mcps.md",sourceDirName:"docs/advanced",slug:"/advanced/writing-mcps",permalink:"/docs/1.0.0/advanced/writing-mcps",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/advanced/writing-mcps.md",tags:[],version:"1.0.0",frontMatter:{title:"Saving MCPs to a File",slug:"/advanced/writing-mcps",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/advanced/writing-mcps.md"},sidebar:"overviewSidebar",previous:{title:"MetadataChangeProposal & MetadataChangeLog Events",permalink:"/docs/1.0.0/advanced/mcp-mcl"},next:{title:"Extending the Metadata Model",permalink:"/docs/1.0.0/metadata-modeling/extending-the-metadata-model"}},p={},u=[{value:"What is an MCP?",id:"what-is-an-mcp",level:2},{value:"Why Write MCPs as Files?",id:"why-write-mcps-as-files",level:2},{value:"Testing",id:"testing",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Saving MCPs to a file",id:"saving-mcps-to-a-file-1",level:2},{value:"Exporting rom DataHub Instance",id:"exporting-rom-datahub-instance",level:3},{value:"Creating MCPs with Python SDK",id:"creating-mcps-with-python-sdk",level:3}],g={toc:u},d="wrapper";function m(e){var{components:t}=e,n=o(e,["components"]);return(0,a.yg)(d,i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"saving-mcps-to-a-file"},"Saving MCPs to a File"),(0,a.yg)("h2",{id:"what-is-an-mcp"},"What is an MCP?"),(0,a.yg)("p",null,"A ",(0,a.yg)("inlineCode",{parentName:"p"},"MetadataChangeProposal")," (MCP) represents an atomic unit of change in the DataHub Metadata Graph. Each MCP carries a single aspect in its payload and is used to propose changes to DataHub's metadata. "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Represents a single aspect change"),(0,a.yg)("li",{parentName:"ul"},"Used for proposing metadata changes to DataHub"),(0,a.yg)("li",{parentName:"ul"},"Serves as the basic building block for metadata ingestion")),(0,a.yg)("p",null,"For more information, please see guides on ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.0.0/what/mxe"},"DataHub Metadata Events")," and ",(0,a.yg)("a",{parentName:"p",href:"/docs/1.0.0/advanced/mcp-mcl"},"MCPs"),". "),(0,a.yg)("h2",{id:"why-write-mcps-as-files"},"Why Write MCPs as Files?"),(0,a.yg)("p",null,"MCPs in JSON file format are particularly valuable because they represent the lowest and most granular form of events in DataHub. There are two main use cases for using previously saved MCP files:"),(0,a.yg)("h3",{id:"testing"},"Testing"),(0,a.yg)("p",null,"MCPs allow you to easily ingest metadata. You can:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Use it for entity ingestion by running a simple command, without a dependency on a ingestion connector:",(0,a.yg)("pre",{parentName:"li"},(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"datahub ingest mcps <file_name>.json\n"))),(0,a.yg)("li",{parentName:"ul"},"Create reproducible test cases for metadata ingestion"),(0,a.yg)("li",{parentName:"ul"},"Write and run tests when contributing to DataHub (see DataHub Testing Guide for more details)")),(0,a.yg)("h3",{id:"debugging"},"Debugging"),(0,a.yg)("p",null,"MCPs are valuable for debugging because they let you:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Examine entities in your DataHub instance at a granular level"),(0,a.yg)("li",{parentName:"ul"},"Export existing entities to MCP files for analysis"),(0,a.yg)("li",{parentName:"ul"},"Verify entity structures and relationships before ingestion")),(0,a.yg)("p",null,"For example, if you want to understand the structure of entities in your DataHub instance, you can emit them as MCP files and examine their contents in detail."),(0,a.yg)("h2",{id:"saving-mcps-to-a-file-1"},"Saving MCPs to a file"),(0,a.yg)("h3",{id:"exporting-rom-datahub-instance"},"Exporting rom DataHub Instance"),(0,a.yg)("p",null,"You can export MCPs directly from your DataHub instance using a recipe file. This is useful when you want to:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Examine existing entities in your DataHub instance"),(0,a.yg)("li",{parentName:"ul"},"Create test cases based on real data"),(0,a.yg)("li",{parentName:"ul"},"Debug entity relationships")),(0,a.yg)("p",null,"First, create a recipe file (e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"export_mcps.yaml"),"):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: datahub\n  config:\n    # Add your DataHub connection configuration here\n    server: "http://localhost:8080"\n    token: "your-access-token"  # If authentication is required\n\nsink:\n  type: "file"\n  config:\n    filename: "mcps.json"\n')),(0,a.yg)("p",null,"Run the ingestion:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"datahub ingest -c export_mcps.yaml\n")),(0,a.yg)("p",null,"This will write all the entities from your DataHub instance to ",(0,a.yg)("inlineCode",{parentName:"p"},"mcps.json")," in MCP format."),(0,a.yg)("h3",{id:"creating-mcps-with-python-sdk"},"Creating MCPs with Python SDK"),(0,a.yg)("p",null,"You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"write_metadata_file")," helper to generate MCPs programmatically:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from datahub.ingestion.sink.file import write_metadata_file\nfrom pathlib import Path\nfrom datahub.metadata.schema_classes import DatasetPropertiesClass\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\n\nrecords = [\n    MetadataChangeProposalWrapper(\n        entityType="dataset",\n        entityUrn="urn:li:dataset:(urn:li:dataPlatform:hive,example_dataset,PROD)",\n        changeType="UPSERT",\n        aspectName="datasetProperties",\n        aspect=DatasetPropertiesClass(\n            description="Example dataset description",\n            customProperties={"encoding": "utf-8"}\n        ))\n\n]\nwrite_metadata_file(\n    file=Path("mcps.json"),\n    records=records,\n)\n')),(0,a.yg)("p",null,"Edit ",(0,a.yg)("inlineCode",{parentName:"p"},"records")," to create the event and entities for your needs."),(0,a.yg)("p",null,"Run the Python script to generate your defined MCPs and save them to a file:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python <file_name>.py\n")),(0,a.yg)("p",null,"For example, the above script will generate an MCP file with a single dataset entity."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'[\n{\n    "entityType": "dataset",\n    "entityUrn": "urn:li:dataset:(urn:li:dataPlatform:hive,example_dataset,PROD)",\n    "changeType": "UPSERT",\n    "aspectName": "datasetProperties",\n    "aspect": {\n        "json": {\n            "customProperties": {\n                "encoding": "utf-8"\n            },\n            "description": "Example dataset description",\n            "tags": []\n        }\n    }\n}\n]\n')))}m.isMDXComponent=!0}}]);