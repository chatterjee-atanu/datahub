"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[59112],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var o=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?o.createElement(g,i(i({ref:n},u),{},{components:t})):o.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},79251:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>p});t(96540);var o=t(15680);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const s={sidebar_position:43,title:"DataHubIngestionSource",slug:"/generated/metamodel/entities/datahubingestionsource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md"},c="DataHubIngestionSource",l={unversionedId:"docs/generated/metamodel/entities/dataHubIngestionSource",id:"docs/generated/metamodel/entities/dataHubIngestionSource",title:"DataHubIngestionSource",description:"Aspects",source:"@site/genDocs/docs/generated/metamodel/entities/dataHubIngestionSource.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/datahubingestionsource",permalink:"/docs/generated/metamodel/entities/datahubingestionsource",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md",tags:[],version:"current",sidebarPosition:43,frontMatter:{sidebar_position:43,title:"DataHubIngestionSource",slug:"/generated/metamodel/entities/datahubingestionsource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md"},sidebar:"overviewSidebar",previous:{title:"DataHubPolicy",permalink:"/docs/generated/metamodel/entities/datahubpolicy"},next:{title:"DataHubSecret",permalink:"/docs/generated/metamodel/entities/datahubsecret"}},u={},p=[{value:"Aspects",id:"aspects",level:2},{value:"dataHubIngestionSourceInfo",id:"datahubingestionsourceinfo",level:3},{value:"ownership",id:"ownership",level:3},{value:"Relationships",id:"relationships",level:2},{value:"Outgoing",id:"outgoing",level:3},{value:"Global Metadata Model",id:"global-metadata-model",level:2}],d={toc:p},m="wrapper";function g(e){var{components:n}=e,t=i(e,["components"]);return(0,o.yg)(m,a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){r(e,n,t[n])}))}return e}({},d,t),{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"datahubingestionsource"},"DataHubIngestionSource"),(0,o.yg)("h2",{id:"aspects"},"Aspects"),(0,o.yg)("h3",{id:"datahubingestionsourceinfo"},"dataHubIngestionSourceInfo"),(0,o.yg)("p",null,"Info about a DataHub ingestion source"),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Schema"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataHubIngestionSourceInfo"\n  },\n  "name": "DataHubIngestionSourceInfo",\n  "namespace": "com.linkedin.ingestion",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "The display name of the ingestion source"\n    },\n    {\n      "Searchable": {\n        "fieldType": "KEYWORD",\n        "queryByDefault": false\n      },\n      "type": "string",\n      "name": "type",\n      "doc": "The type of the source itself, e.g. mysql, bigquery, bigquery-usage. Should match the recipe."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "platform",\n      "default": null,\n      "doc": "Data Platform URN associated with the source"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "DataHubIngestionSourceSchedule",\n          "namespace": "com.linkedin.ingestion",\n          "fields": [\n            {\n              "type": "string",\n              "name": "interval",\n              "doc": "A cron-formatted execution interval, as a cron string, e.g. * * * * *"\n            },\n            {\n              "type": "string",\n              "name": "timezone",\n              "doc": "Timezone in which the cron interval applies, e.g. America/Los Angeles"\n            }\n          ],\n          "doc": "The schedule associated with an ingestion source."\n        }\n      ],\n      "name": "schedule",\n      "default": null,\n      "doc": "The schedule on which the ingestion source is executed"\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "DataHubIngestionSourceConfig",\n        "namespace": "com.linkedin.ingestion",\n        "fields": [\n          {\n            "type": "string",\n            "name": "recipe",\n            "doc": "The JSON recipe to use for ingestion"\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "version",\n            "default": null,\n            "doc": "The PyPI version of the datahub CLI to use when executing a recipe"\n          },\n          {\n            "Searchable": {\n              "fieldName": "sourceExecutorId",\n              "fieldType": "KEYWORD",\n              "queryByDefault": false\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "executorId",\n            "default": null,\n            "doc": "The id of the executor to use to execute the ingestion run"\n          },\n          {\n            "type": [\n              "null",\n              "boolean"\n            ],\n            "name": "debugMode",\n            "default": null,\n            "doc": "Whether or not to run this ingestion source in debug mode"\n          },\n          {\n            "type": [\n              "null",\n              {\n                "type": "map",\n                "values": "string"\n              }\n            ],\n            "name": "extraArgs",\n            "default": null,\n            "doc": "Extra arguments for the ingestion run."\n          }\n        ]\n      },\n      "name": "config",\n      "doc": "Parameters associated with the Ingestion Source"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "DataHubIngestionSourceSource",\n          "namespace": "com.linkedin.ingestion",\n          "fields": [\n            {\n              "Searchable": {\n                "fieldName": "sourceType",\n                "fieldType": "KEYWORD",\n                "queryByDefault": false\n              },\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "SYSTEM": "A system internal source, e.g. for running search indexing operations, feature computation, etc."\n                },\n                "name": "DataHubIngestionSourceSourceType",\n                "namespace": "com.linkedin.ingestion",\n                "symbols": [\n                  "SYSTEM"\n                ]\n              },\n              "name": "type",\n              "doc": "The source type of the ingestion source"\n            }\n          ]\n        }\n      ],\n      "name": "source",\n      "default": null,\n      "doc": "The source or origin of the Ingestion Source\\n\\nCurrently CLI and UI do not provide an explicit source."\n    }\n  ],\n  "doc": "Info about a DataHub ingestion source"\n}\n'))),(0,o.yg)("h3",{id:"ownership"},"ownership"),(0,o.yg)("p",null,"Ownership information of an entity."),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Schema"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "ownership"\n  },\n  "name": "Ownership",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "type": {\n        "type": "array",\n        "items": {\n          "type": "record",\n          "name": "Owner",\n          "namespace": "com.linkedin.common",\n          "fields": [\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "corpuser",\n                  "corpGroup"\n                ],\n                "name": "OwnedBy"\n              },\n              "Searchable": {\n                "addToFilters": true,\n                "fieldName": "owners",\n                "fieldType": "URN",\n                "filterNameOverride": "Owned By",\n                "hasValuesFieldName": "hasOwners",\n                "queryByDefault": false\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": "string",\n              "name": "owner",\n              "doc": "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name\\n(Caveat: only corpuser is currently supported in the frontend.)"\n            },\n            {\n              "deprecated": true,\n              "type": {\n                "type": "enum",\n                "symbolDocs": {\n                  "BUSINESS_OWNER": "A person or group who is responsible for logical, or business related, aspects of the asset.",\n                  "CONSUMER": "A person, group, or service that consumes the data\\nDeprecated! Use TECHNICAL_OWNER or BUSINESS_OWNER instead.",\n                  "CUSTOM": "Set when ownership type is unknown or a when new one is specified as an ownership type entity for which we have no\\nenum value for. This is used for backwards compatibility",\n                  "DATAOWNER": "A person or group that is owning the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DATA_STEWARD": "A steward, expert, or delegate responsible for the asset.",\n                  "DELEGATE": "A person or a group that overseas the operation, e.g. a DBA or SRE.\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "DEVELOPER": "A person or group that is in charge of developing the code\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "NONE": "No specific type associated to the owner.",\n                  "PRODUCER": "A person, group, or service that produces/generates the data\\nDeprecated! Use TECHNICAL_OWNER instead.",\n                  "STAKEHOLDER": "A person or a group that has direct business interest\\nDeprecated! Use TECHNICAL_OWNER, BUSINESS_OWNER, or STEWARD instead.",\n                  "TECHNICAL_OWNER": "person or group who is responsible for technical aspects of the asset."\n                },\n                "deprecatedSymbols": {\n                  "CONSUMER": true,\n                  "DATAOWNER": true,\n                  "DELEGATE": true,\n                  "DEVELOPER": true,\n                  "PRODUCER": true,\n                  "STAKEHOLDER": true\n                },\n                "name": "OwnershipType",\n                "namespace": "com.linkedin.common",\n                "symbols": [\n                  "CUSTOM",\n                  "TECHNICAL_OWNER",\n                  "BUSINESS_OWNER",\n                  "DATA_STEWARD",\n                  "NONE",\n                  "DEVELOPER",\n                  "DATAOWNER",\n                  "DELEGATE",\n                  "PRODUCER",\n                  "CONSUMER",\n                  "STAKEHOLDER"\n                ],\n                "doc": "Asset owner types"\n              },\n              "name": "type",\n              "doc": "The type of the ownership"\n            },\n            {\n              "Relationship": {\n                "entityTypes": [\n                  "ownershipType"\n                ],\n                "name": "ownershipType"\n              },\n              "java": {\n                "class": "com.linkedin.common.urn.Urn"\n              },\n              "type": [\n                "null",\n                "string"\n              ],\n              "name": "typeUrn",\n              "default": null,\n              "doc": "The type of the ownership\\nUrn of type O"\n            },\n            {\n              "type": [\n                "null",\n                {\n                  "type": "record",\n                  "name": "OwnershipSource",\n                  "namespace": "com.linkedin.common",\n                  "fields": [\n                    {\n                      "type": {\n                        "type": "enum",\n                        "symbolDocs": {\n                          "AUDIT": "Auditing system or audit logs",\n                          "DATABASE": "Database, e.g. GRANTS table",\n                          "FILE_SYSTEM": "File system, e.g. file/directory owner",\n                          "ISSUE_TRACKING_SYSTEM": "Issue tracking system, e.g. Jira",\n                          "MANUAL": "Manually provided by a user",\n                          "OTHER": "Other sources",\n                          "SERVICE": "Other ownership-like service, e.g. Nuage, ACL service etc",\n                          "SOURCE_CONTROL": "SCM system, e.g. GIT, SVN"\n                        },\n                        "name": "OwnershipSourceType",\n                        "namespace": "com.linkedin.common",\n                        "symbols": [\n                          "AUDIT",\n                          "DATABASE",\n                          "FILE_SYSTEM",\n                          "ISSUE_TRACKING_SYSTEM",\n                          "MANUAL",\n                          "SERVICE",\n                          "SOURCE_CONTROL",\n                          "OTHER"\n                        ]\n                      },\n                      "name": "type",\n                      "doc": "The type of the source"\n                    },\n                    {\n                      "type": [\n                        "null",\n                        "string"\n                      ],\n                      "name": "url",\n                      "default": null,\n                      "doc": "A reference URL for the source"\n                    }\n                  ],\n                  "doc": "Source/provider of the ownership information"\n                }\n              ],\n              "name": "source",\n              "default": null,\n              "doc": "Source information for the ownership"\n            }\n          ],\n          "doc": "Ownership information"\n        }\n      },\n      "name": "owners",\n      "doc": "List of owners of the entity."\n    },\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "MAP_ARRAY",\n          "queryByDefault": false\n        }\n      },\n      "type": [\n        {\n          "type": "map",\n          "values": {\n            "type": "array",\n            "items": "string"\n          }\n        },\n        "null"\n      ],\n      "name": "ownerTypes",\n      "default": {},\n      "doc": "Ownership type to Owners map, populated via mutation hook."\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "AuditStamp",\n        "namespace": "com.linkedin.common",\n        "fields": [\n          {\n            "type": "long",\n            "name": "time",\n            "doc": "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": "string",\n            "name": "actor",\n            "doc": "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."\n          },\n          {\n            "java": {\n              "class": "com.linkedin.common.urn.Urn"\n            },\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "impersonator",\n            "default": null,\n            "doc": "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor."\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "message",\n            "default": null,\n            "doc": "Additional context around how DataHub was informed of the particular change. For example: was the change created by an automated process, or manually."\n          }\n        ],\n        "doc": "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage."\n      },\n      "name": "lastModified",\n      "default": {\n        "actor": "urn:li:corpuser:unknown",\n        "impersonator": null,\n        "time": 0,\n        "message": null\n      },\n      "doc": "Audit stamp containing who last modified the record and when. A value of 0 in the time field indicates missing data."\n    }\n  ],\n  "doc": "Ownership information of an entity."\n}\n'))),(0,o.yg)("h2",{id:"relationships"},"Relationships"),(0,o.yg)("h3",{id:"outgoing"},"Outgoing"),(0,o.yg)("p",null,"These are the relationships stored in this entity's aspects"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"OwnedBy"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Corpuser via ",(0,o.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")),(0,o.yg)("li",{parentName:"ul"},"CorpGroup via ",(0,o.yg)("inlineCode",{parentName:"li"},"ownership.owners.owner")))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"ownershipType"),(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"OwnershipType via ",(0,o.yg)("inlineCode",{parentName:"li"},"ownership.owners.typeUrn"))))),(0,o.yg)("h2",{id:"global-metadata-model"},(0,o.yg)("a",{parentName:"h2",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,o.yg)("p",null,(0,o.yg)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}g.isMDXComponent=!0}}]);